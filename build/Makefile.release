OWNER = elastic
REPO = terraform-provider-ec
PREFIXED_V = v$(subst -dev,,$(VERSION))

### Release targets

## Tags the current commit as the release commit with $(VERSION) (minus -dev).
tag:
	@ git fetch
ifeq ($(shell git tag -l $(PREFIXED_V)),$(PREFIXED_V))
	@ echo "-> git tag $(PREFIXED_V) already exists, exiting..."
	@ exit 1
endif
ifeq ($(shell git remote -v | grep $(OWNER)/$(REPO)),)
	@ echo "-> git remote 'upstream' is not configured, exiting..."
	@ exit 2
endif
	@ $(eval REMOTE = $(shell git remote -v | grep $(OWNER)/$(REPO)| head -1 | awk '{print $$1}'))
	@ echo "Pushing git tag $(PREFIXED_V) to remote \"$(REMOTE)\"..."
	@ git tag $(PREFIXED_V)
	@ git push -u $(REMOTE) $(PREFIXED_V)

## Creates a snapshot build of the terraform provider.
snapshot: $(GOBIN)/goreleaser
	@ $(GOBIN)/goreleaser --rm-dist --snapshot --skip-validate

## Releases a new version of the terraform provider with a matching tag.
release: $(GOBIN)/goreleaser
	@ $(MAKE) gen VERSION=$(subst -dev,,$(VERSION))
	@ $(GOBIN)/goreleaser --rm-dist --skip-validate

## Builds a new version of the terraform provider with a matching tag without publishing it.
release-no-publish: $(GOBIN)/goreleaser
	@ $(MAKE) gen VERSION=$(subst -dev,,$(VERSION))
	@ $(GOBIN)/goreleaser --rm-dist --skip-validate --skip-publish

.PHONY: changelog
changelog: $(GOBIN)/changelog-build
	@ echo "-> Generating changelog..."
	@ ./scripts/generate-changelog.sh
