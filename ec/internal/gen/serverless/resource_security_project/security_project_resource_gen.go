// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_security_project

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func SecurityProjectResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"admin_features_package": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "admin features package (BYOK, BYOIDP, CCS, CCR)",
				MarkdownDescription: "admin features package (BYOK, BYOIDP, CCS, CCR)",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"standard",
						"enterprise",
					),
				},
			},
			"alias": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "A custom domain label compatible with RFC-1035 standards. Derived from the project name by default.",
				MarkdownDescription: "A custom domain label compatible with RFC-1035 standards. Derived from the project name by default.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 50),
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z]{1}(?:[a-zA-Z0-9-]*[a-zA-Z0-9]{1})?$"), ""),
				},
			},
			"cloud_id": schema.StringAttribute{
				Computed:            true,
				Description:         "The cloud ID, an encoded string that provides other Elastic services with the necessary information to connect to this Elasticsearch and Kibana.",
				MarkdownDescription: "The cloud ID, an encoded string that provides other Elastic services with the necessary information to connect to this Elasticsearch and Kibana.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"credentials": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"password": schema.StringAttribute{
						Computed:            true,
						Description:         "Basic auth password that can be used to access the Elasticsearch API.",
						MarkdownDescription: "Basic auth password that can be used to access the Elasticsearch API.",
					},
					"username": schema.StringAttribute{
						Computed:            true,
						Description:         "Basic auth username that can be used to access the Elasticsearch API.",
						MarkdownDescription: "Basic auth username that can be used to access the Elasticsearch API.",
					},
				},
				CustomType: CredentialsType{
					ObjectType: types.ObjectType{
						AttrTypes: CredentialsValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "Basic auth credentials to access the Elasticsearch API.",
				MarkdownDescription: "Basic auth credentials to access the Elasticsearch API.",
			},
			"endpoints": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"elasticsearch": schema.StringAttribute{
						Computed:            true,
						Description:         "The endpoint to access elasticsearch.",
						MarkdownDescription: "The endpoint to access elasticsearch.",
					},
					"kibana": schema.StringAttribute{
						Computed:            true,
						Description:         "The endpoint to access kibana.",
						MarkdownDescription: "The endpoint to access kibana.",
					},
				},
				CustomType: EndpointsType{
					ObjectType: types.ObjectType{
						AttrTypes: EndpointsValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "The endpoints to access the different apps of the project.",
				MarkdownDescription: "The endpoints to access the different apps of the project.",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "ID of the project.",
				MarkdownDescription: "ID of the project.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"metadata": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"created_at": schema.StringAttribute{
						Computed:            true,
						Description:         "Date and time when the project was created.",
						MarkdownDescription: "Date and time when the project was created.",
					},
					"created_by": schema.StringAttribute{
						Computed:            true,
						Description:         "ID of the user.",
						MarkdownDescription: "ID of the user.",
					},
					"organization_id": schema.StringAttribute{
						Computed:            true,
						Description:         "The Organization ID who owns the project.",
						MarkdownDescription: "The Organization ID who owns the project.",
					},
					"suspended_at": schema.StringAttribute{
						Computed:            true,
						Description:         "Date and time when the project was suspended.",
						MarkdownDescription: "Date and time when the project was suspended.",
					},
					"suspended_reason": schema.StringAttribute{
						Computed:            true,
						Description:         "Reason why the project was suspended.",
						MarkdownDescription: "Reason why the project was suspended.",
					},
				},
				CustomType: MetadataType{
					ObjectType: types.ObjectType{
						AttrTypes: MetadataValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "Additional details about the project.",
				MarkdownDescription: "Additional details about the project.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "Descriptive name for a project.",
				MarkdownDescription: "Descriptive name for a project.",
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 255),
				},
			},
			"product_types": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"product_line": schema.StringAttribute{
							Required:            true,
							Description:         "The identifier of the Security Solution product line.",
							MarkdownDescription: "The identifier of the Security Solution product line.",
							Validators: []validator.String{
								stringvalidator.OneOf(
									"security",
									"cloud",
									"endpoint",
								),
							},
						},
						"product_tier": schema.StringAttribute{
							Required:            true,
							Description:         "The identifier of the Security Solution product tier.",
							MarkdownDescription: "The identifier of the Security Solution product tier.",
							Validators: []validator.String{
								stringvalidator.OneOf(
									"complete",
									"essentials",
								),
							},
						},
					},
					CustomType: ProductTypesType{
						ObjectType: types.ObjectType{
							AttrTypes: ProductTypesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional: true,
				Computed: true,
				Validators: []validator.List{
					listvalidator.SizeBetween(2, 3),
				},
			},
			"region_id": schema.StringAttribute{
				Required:            true,
				Description:         "Unique human-readable identifier for a region in Elastic Cloud.",
				MarkdownDescription: "Unique human-readable identifier for a region in Elastic Cloud.",
			},
			"type": schema.StringAttribute{
				Computed:            true,
				Description:         "the type of the project",
				MarkdownDescription: "the type of the project",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

type SecurityProjectModel struct {
	AdminFeaturesPackage types.String     `tfsdk:"admin_features_package"`
	Alias                types.String     `tfsdk:"alias"`
	CloudId              types.String     `tfsdk:"cloud_id"`
	Credentials          CredentialsValue `tfsdk:"credentials"`
	Endpoints            EndpointsValue   `tfsdk:"endpoints"`
	Id                   types.String     `tfsdk:"id"`
	Metadata             MetadataValue    `tfsdk:"metadata"`
	Name                 types.String     `tfsdk:"name"`
	ProductTypes         types.List       `tfsdk:"product_types"`
	RegionId             types.String     `tfsdk:"region_id"`
	Type                 types.String     `tfsdk:"type"`
}

var _ basetypes.ObjectTypable = CredentialsType{}

type CredentialsType struct {
	basetypes.ObjectType
}

func (t CredentialsType) Equal(o attr.Type) bool {
	other, ok := o.(CredentialsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CredentialsType) String() string {
	return "CredentialsType"
}

func (t CredentialsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return nil, diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return nil, diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CredentialsValue{
		Password: passwordVal,
		Username: usernameVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewCredentialsValueNull() CredentialsValue {
	return CredentialsValue{
		state: attr.ValueStateNull,
	}
}

func NewCredentialsValueUnknown() CredentialsValue {
	return CredentialsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCredentialsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CredentialsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CredentialsValue Attribute Value",
				"While creating a CredentialsValue value, a missing attribute value was detected. "+
					"A CredentialsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CredentialsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CredentialsValue Attribute Type",
				"While creating a CredentialsValue value, an invalid attribute value was detected. "+
					"A CredentialsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CredentialsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CredentialsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CredentialsValue Attribute Value",
				"While creating a CredentialsValue value, an extra attribute value was detected. "+
					"A CredentialsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CredentialsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCredentialsValueUnknown(), diags
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return NewCredentialsValueUnknown(), diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return NewCredentialsValueUnknown(), diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	if diags.HasError() {
		return NewCredentialsValueUnknown(), diags
	}

	return CredentialsValue{
		Password: passwordVal,
		Username: usernameVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewCredentialsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CredentialsValue {
	object, diags := NewCredentialsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCredentialsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CredentialsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCredentialsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCredentialsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCredentialsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCredentialsValueMust(CredentialsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CredentialsType) ValueType(ctx context.Context) attr.Value {
	return CredentialsValue{}
}

var _ basetypes.ObjectValuable = CredentialsValue{}

type CredentialsValue struct {
	Password basetypes.StringValue `tfsdk:"password"`
	Username basetypes.StringValue `tfsdk:"username"`
	state    attr.ValueState
}

func (v CredentialsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["password"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["username"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Password.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["password"] = val

		val, err = v.Username.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["username"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CredentialsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CredentialsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CredentialsValue) String() string {
	return "CredentialsValue"
}

func (v CredentialsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"password": basetypes.StringType{},
		"username": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"password": v.Password,
			"username": v.Username,
		})

	return objVal, diags
}

func (v CredentialsValue) Equal(o attr.Value) bool {
	other, ok := o.(CredentialsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Password.Equal(other.Password) {
		return false
	}

	if !v.Username.Equal(other.Username) {
		return false
	}

	return true
}

func (v CredentialsValue) Type(ctx context.Context) attr.Type {
	return CredentialsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CredentialsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"password": basetypes.StringType{},
		"username": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = EndpointsType{}

type EndpointsType struct {
	basetypes.ObjectType
}

func (t EndpointsType) Equal(o attr.Type) bool {
	other, ok := o.(EndpointsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t EndpointsType) String() string {
	return "EndpointsType"
}

func (t EndpointsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	elasticsearchAttribute, ok := attributes["elasticsearch"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`elasticsearch is missing from object`)

		return nil, diags
	}

	elasticsearchVal, ok := elasticsearchAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`elasticsearch expected to be basetypes.StringValue, was: %T`, elasticsearchAttribute))
	}

	kibanaAttribute, ok := attributes["kibana"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kibana is missing from object`)

		return nil, diags
	}

	kibanaVal, ok := kibanaAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kibana expected to be basetypes.StringValue, was: %T`, kibanaAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return EndpointsValue{
		Elasticsearch: elasticsearchVal,
		Kibana:        kibanaVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewEndpointsValueNull() EndpointsValue {
	return EndpointsValue{
		state: attr.ValueStateNull,
	}
}

func NewEndpointsValueUnknown() EndpointsValue {
	return EndpointsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewEndpointsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (EndpointsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing EndpointsValue Attribute Value",
				"While creating a EndpointsValue value, a missing attribute value was detected. "+
					"A EndpointsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("EndpointsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid EndpointsValue Attribute Type",
				"While creating a EndpointsValue value, an invalid attribute value was detected. "+
					"A EndpointsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("EndpointsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("EndpointsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra EndpointsValue Attribute Value",
				"While creating a EndpointsValue value, an extra attribute value was detected. "+
					"A EndpointsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra EndpointsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewEndpointsValueUnknown(), diags
	}

	elasticsearchAttribute, ok := attributes["elasticsearch"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`elasticsearch is missing from object`)

		return NewEndpointsValueUnknown(), diags
	}

	elasticsearchVal, ok := elasticsearchAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`elasticsearch expected to be basetypes.StringValue, was: %T`, elasticsearchAttribute))
	}

	kibanaAttribute, ok := attributes["kibana"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kibana is missing from object`)

		return NewEndpointsValueUnknown(), diags
	}

	kibanaVal, ok := kibanaAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kibana expected to be basetypes.StringValue, was: %T`, kibanaAttribute))
	}

	if diags.HasError() {
		return NewEndpointsValueUnknown(), diags
	}

	return EndpointsValue{
		Elasticsearch: elasticsearchVal,
		Kibana:        kibanaVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewEndpointsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) EndpointsValue {
	object, diags := NewEndpointsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewEndpointsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t EndpointsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewEndpointsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewEndpointsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewEndpointsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewEndpointsValueMust(EndpointsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t EndpointsType) ValueType(ctx context.Context) attr.Value {
	return EndpointsValue{}
}

var _ basetypes.ObjectValuable = EndpointsValue{}

type EndpointsValue struct {
	Elasticsearch basetypes.StringValue `tfsdk:"elasticsearch"`
	Kibana        basetypes.StringValue `tfsdk:"kibana"`
	state         attr.ValueState
}

func (v EndpointsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["elasticsearch"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["kibana"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Elasticsearch.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["elasticsearch"] = val

		val, err = v.Kibana.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["kibana"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v EndpointsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v EndpointsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v EndpointsValue) String() string {
	return "EndpointsValue"
}

func (v EndpointsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"elasticsearch": basetypes.StringType{},
		"kibana":        basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"elasticsearch": v.Elasticsearch,
			"kibana":        v.Kibana,
		})

	return objVal, diags
}

func (v EndpointsValue) Equal(o attr.Value) bool {
	other, ok := o.(EndpointsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Elasticsearch.Equal(other.Elasticsearch) {
		return false
	}

	if !v.Kibana.Equal(other.Kibana) {
		return false
	}

	return true
}

func (v EndpointsValue) Type(ctx context.Context) attr.Type {
	return EndpointsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v EndpointsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"elasticsearch": basetypes.StringType{},
		"kibana":        basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = MetadataType{}

type MetadataType struct {
	basetypes.ObjectType
}

func (t MetadataType) Equal(o attr.Type) bool {
	other, ok := o.(MetadataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MetadataType) String() string {
	return "MetadataType"
}

func (t MetadataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	createdByAttribute, ok := attributes["created_by"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_by is missing from object`)

		return nil, diags
	}

	createdByVal, ok := createdByAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_by expected to be basetypes.StringValue, was: %T`, createdByAttribute))
	}

	organizationIdAttribute, ok := attributes["organization_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`organization_id is missing from object`)

		return nil, diags
	}

	organizationIdVal, ok := organizationIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`organization_id expected to be basetypes.StringValue, was: %T`, organizationIdAttribute))
	}

	suspendedAtAttribute, ok := attributes["suspended_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`suspended_at is missing from object`)

		return nil, diags
	}

	suspendedAtVal, ok := suspendedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`suspended_at expected to be basetypes.StringValue, was: %T`, suspendedAtAttribute))
	}

	suspendedReasonAttribute, ok := attributes["suspended_reason"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`suspended_reason is missing from object`)

		return nil, diags
	}

	suspendedReasonVal, ok := suspendedReasonAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`suspended_reason expected to be basetypes.StringValue, was: %T`, suspendedReasonAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MetadataValue{
		CreatedAt:       createdAtVal,
		CreatedBy:       createdByVal,
		OrganizationId:  organizationIdVal,
		SuspendedAt:     suspendedAtVal,
		SuspendedReason: suspendedReasonVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueNull() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateNull,
	}
}

func NewMetadataValueUnknown() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMetadataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MetadataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MetadataValue Attribute Value",
				"While creating a MetadataValue value, a missing attribute value was detected. "+
					"A MetadataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MetadataValue Attribute Type",
				"While creating a MetadataValue value, an invalid attribute value was detected. "+
					"A MetadataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MetadataValue Attribute Value",
				"While creating a MetadataValue value, an extra attribute value was detected. "+
					"A MetadataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MetadataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	createdByAttribute, ok := attributes["created_by"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_by is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	createdByVal, ok := createdByAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_by expected to be basetypes.StringValue, was: %T`, createdByAttribute))
	}

	organizationIdAttribute, ok := attributes["organization_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`organization_id is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	organizationIdVal, ok := organizationIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`organization_id expected to be basetypes.StringValue, was: %T`, organizationIdAttribute))
	}

	suspendedAtAttribute, ok := attributes["suspended_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`suspended_at is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	suspendedAtVal, ok := suspendedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`suspended_at expected to be basetypes.StringValue, was: %T`, suspendedAtAttribute))
	}

	suspendedReasonAttribute, ok := attributes["suspended_reason"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`suspended_reason is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	suspendedReasonVal, ok := suspendedReasonAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`suspended_reason expected to be basetypes.StringValue, was: %T`, suspendedReasonAttribute))
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	return MetadataValue{
		CreatedAt:       createdAtVal,
		CreatedBy:       createdByVal,
		OrganizationId:  organizationIdVal,
		SuspendedAt:     suspendedAtVal,
		SuspendedReason: suspendedReasonVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MetadataValue {
	object, diags := NewMetadataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMetadataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MetadataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMetadataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMetadataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMetadataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMetadataValueMust(MetadataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MetadataType) ValueType(ctx context.Context) attr.Value {
	return MetadataValue{}
}

var _ basetypes.ObjectValuable = MetadataValue{}

type MetadataValue struct {
	CreatedAt       basetypes.StringValue `tfsdk:"created_at"`
	CreatedBy       basetypes.StringValue `tfsdk:"created_by"`
	OrganizationId  basetypes.StringValue `tfsdk:"organization_id"`
	SuspendedAt     basetypes.StringValue `tfsdk:"suspended_at"`
	SuspendedReason basetypes.StringValue `tfsdk:"suspended_reason"`
	state           attr.ValueState
}

func (v MetadataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["created_by"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["organization_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["suspended_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["suspended_reason"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.CreatedBy.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_by"] = val

		val, err = v.OrganizationId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["organization_id"] = val

		val, err = v.SuspendedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["suspended_at"] = val

		val, err = v.SuspendedReason.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["suspended_reason"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MetadataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MetadataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MetadataValue) String() string {
	return "MetadataValue"
}

func (v MetadataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"created_at":       basetypes.StringType{},
		"created_by":       basetypes.StringType{},
		"organization_id":  basetypes.StringType{},
		"suspended_at":     basetypes.StringType{},
		"suspended_reason": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"created_at":       v.CreatedAt,
			"created_by":       v.CreatedBy,
			"organization_id":  v.OrganizationId,
			"suspended_at":     v.SuspendedAt,
			"suspended_reason": v.SuspendedReason,
		})

	return objVal, diags
}

func (v MetadataValue) Equal(o attr.Value) bool {
	other, ok := o.(MetadataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.CreatedBy.Equal(other.CreatedBy) {
		return false
	}

	if !v.OrganizationId.Equal(other.OrganizationId) {
		return false
	}

	if !v.SuspendedAt.Equal(other.SuspendedAt) {
		return false
	}

	if !v.SuspendedReason.Equal(other.SuspendedReason) {
		return false
	}

	return true
}

func (v MetadataValue) Type(ctx context.Context) attr.Type {
	return MetadataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MetadataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created_at":       basetypes.StringType{},
		"created_by":       basetypes.StringType{},
		"organization_id":  basetypes.StringType{},
		"suspended_at":     basetypes.StringType{},
		"suspended_reason": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = ProductTypesType{}

type ProductTypesType struct {
	basetypes.ObjectType
}

func (t ProductTypesType) Equal(o attr.Type) bool {
	other, ok := o.(ProductTypesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ProductTypesType) String() string {
	return "ProductTypesType"
}

func (t ProductTypesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	productLineAttribute, ok := attributes["product_line"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`product_line is missing from object`)

		return nil, diags
	}

	productLineVal, ok := productLineAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`product_line expected to be basetypes.StringValue, was: %T`, productLineAttribute))
	}

	productTierAttribute, ok := attributes["product_tier"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`product_tier is missing from object`)

		return nil, diags
	}

	productTierVal, ok := productTierAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`product_tier expected to be basetypes.StringValue, was: %T`, productTierAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ProductTypesValue{
		ProductLine: productLineVal,
		ProductTier: productTierVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewProductTypesValueNull() ProductTypesValue {
	return ProductTypesValue{
		state: attr.ValueStateNull,
	}
}

func NewProductTypesValueUnknown() ProductTypesValue {
	return ProductTypesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewProductTypesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ProductTypesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ProductTypesValue Attribute Value",
				"While creating a ProductTypesValue value, a missing attribute value was detected. "+
					"A ProductTypesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ProductTypesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ProductTypesValue Attribute Type",
				"While creating a ProductTypesValue value, an invalid attribute value was detected. "+
					"A ProductTypesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ProductTypesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ProductTypesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ProductTypesValue Attribute Value",
				"While creating a ProductTypesValue value, an extra attribute value was detected. "+
					"A ProductTypesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ProductTypesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewProductTypesValueUnknown(), diags
	}

	productLineAttribute, ok := attributes["product_line"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`product_line is missing from object`)

		return NewProductTypesValueUnknown(), diags
	}

	productLineVal, ok := productLineAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`product_line expected to be basetypes.StringValue, was: %T`, productLineAttribute))
	}

	productTierAttribute, ok := attributes["product_tier"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`product_tier is missing from object`)

		return NewProductTypesValueUnknown(), diags
	}

	productTierVal, ok := productTierAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`product_tier expected to be basetypes.StringValue, was: %T`, productTierAttribute))
	}

	if diags.HasError() {
		return NewProductTypesValueUnknown(), diags
	}

	return ProductTypesValue{
		ProductLine: productLineVal,
		ProductTier: productTierVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewProductTypesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ProductTypesValue {
	object, diags := NewProductTypesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewProductTypesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ProductTypesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewProductTypesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewProductTypesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewProductTypesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewProductTypesValueMust(ProductTypesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ProductTypesType) ValueType(ctx context.Context) attr.Value {
	return ProductTypesValue{}
}

var _ basetypes.ObjectValuable = ProductTypesValue{}

type ProductTypesValue struct {
	ProductLine basetypes.StringValue `tfsdk:"product_line"`
	ProductTier basetypes.StringValue `tfsdk:"product_tier"`
	state       attr.ValueState
}

func (v ProductTypesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["product_line"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["product_tier"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.ProductLine.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["product_line"] = val

		val, err = v.ProductTier.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["product_tier"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ProductTypesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ProductTypesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ProductTypesValue) String() string {
	return "ProductTypesValue"
}

func (v ProductTypesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"product_line": basetypes.StringType{},
		"product_tier": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"product_line": v.ProductLine,
			"product_tier": v.ProductTier,
		})

	return objVal, diags
}

func (v ProductTypesValue) Equal(o attr.Value) bool {
	other, ok := o.(ProductTypesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ProductLine.Equal(other.ProductLine) {
		return false
	}

	if !v.ProductTier.Equal(other.ProductTier) {
		return false
	}

	return true
}

func (v ProductTypesValue) Type(ctx context.Context) attr.Type {
	return ProductTypesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ProductTypesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"product_line": basetypes.StringType{},
		"product_tier": basetypes.StringType{},
	}
}
