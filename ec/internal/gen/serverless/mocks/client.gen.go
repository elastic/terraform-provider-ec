// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/elastic/terraform-provider-ec/ec/internal/gen/serverless (interfaces: ClientWithResponsesInterface,ClientInterface)
//
// Generated by this command:
//
//	mockgen -destination=mocks/client.gen.go -package mocks . ClientWithResponsesInterface,ClientInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	serverless "github.com/elastic/terraform-provider-ec/ec/internal/gen/serverless"
	gomock "go.uber.org/mock/gomock"
)

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
	isgomock struct{}
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// CreateElasticsearchProjectWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateElasticsearchProjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...serverless.RequestEditorFn) (*serverless.CreateElasticsearchProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateElasticsearchProjectWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.CreateElasticsearchProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateElasticsearchProjectWithBodyWithResponse indicates an expected call of CreateElasticsearchProjectWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateElasticsearchProjectWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateElasticsearchProjectWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateElasticsearchProjectWithBodyWithResponse), varargs...)
}

// CreateElasticsearchProjectWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateElasticsearchProjectWithResponse(ctx context.Context, body serverless.CreateElasticsearchProjectJSONRequestBody, reqEditors ...serverless.RequestEditorFn) (*serverless.CreateElasticsearchProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateElasticsearchProjectWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.CreateElasticsearchProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateElasticsearchProjectWithResponse indicates an expected call of CreateElasticsearchProjectWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateElasticsearchProjectWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateElasticsearchProjectWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateElasticsearchProjectWithResponse), varargs...)
}

// CreateObservabilityProjectWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateObservabilityProjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...serverless.RequestEditorFn) (*serverless.CreateObservabilityProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateObservabilityProjectWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.CreateObservabilityProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObservabilityProjectWithBodyWithResponse indicates an expected call of CreateObservabilityProjectWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateObservabilityProjectWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObservabilityProjectWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateObservabilityProjectWithBodyWithResponse), varargs...)
}

// CreateObservabilityProjectWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateObservabilityProjectWithResponse(ctx context.Context, body serverless.CreateObservabilityProjectJSONRequestBody, reqEditors ...serverless.RequestEditorFn) (*serverless.CreateObservabilityProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateObservabilityProjectWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.CreateObservabilityProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObservabilityProjectWithResponse indicates an expected call of CreateObservabilityProjectWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateObservabilityProjectWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObservabilityProjectWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateObservabilityProjectWithResponse), varargs...)
}

// CreateSecurityProjectWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateSecurityProjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...serverless.RequestEditorFn) (*serverless.CreateSecurityProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSecurityProjectWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.CreateSecurityProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityProjectWithBodyWithResponse indicates an expected call of CreateSecurityProjectWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateSecurityProjectWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityProjectWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateSecurityProjectWithBodyWithResponse), varargs...)
}

// CreateSecurityProjectWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateSecurityProjectWithResponse(ctx context.Context, body serverless.CreateSecurityProjectJSONRequestBody, reqEditors ...serverless.RequestEditorFn) (*serverless.CreateSecurityProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSecurityProjectWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.CreateSecurityProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityProjectWithResponse indicates an expected call of CreateSecurityProjectWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateSecurityProjectWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityProjectWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateSecurityProjectWithResponse), varargs...)
}

// DeleteElasticsearchProjectWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteElasticsearchProjectWithResponse(ctx context.Context, id serverless.ProjectID, params *serverless.DeleteElasticsearchProjectParams, reqEditors ...serverless.RequestEditorFn) (*serverless.DeleteElasticsearchProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteElasticsearchProjectWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.DeleteElasticsearchProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteElasticsearchProjectWithResponse indicates an expected call of DeleteElasticsearchProjectWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteElasticsearchProjectWithResponse(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteElasticsearchProjectWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteElasticsearchProjectWithResponse), varargs...)
}

// DeleteObservabilityProjectWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteObservabilityProjectWithResponse(ctx context.Context, id serverless.ProjectID, params *serverless.DeleteObservabilityProjectParams, reqEditors ...serverless.RequestEditorFn) (*serverless.DeleteObservabilityProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteObservabilityProjectWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.DeleteObservabilityProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObservabilityProjectWithResponse indicates an expected call of DeleteObservabilityProjectWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteObservabilityProjectWithResponse(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObservabilityProjectWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteObservabilityProjectWithResponse), varargs...)
}

// DeleteSecurityProjectWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteSecurityProjectWithResponse(ctx context.Context, id serverless.ProjectID, params *serverless.DeleteSecurityProjectParams, reqEditors ...serverless.RequestEditorFn) (*serverless.DeleteSecurityProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSecurityProjectWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.DeleteSecurityProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecurityProjectWithResponse indicates an expected call of DeleteSecurityProjectWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteSecurityProjectWithResponse(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityProjectWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteSecurityProjectWithResponse), varargs...)
}

// GetElasticsearchProjectRolesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetElasticsearchProjectRolesWithResponse(ctx context.Context, id serverless.ProjectID, reqEditors ...serverless.RequestEditorFn) (*serverless.GetElasticsearchProjectRolesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetElasticsearchProjectRolesWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.GetElasticsearchProjectRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetElasticsearchProjectRolesWithResponse indicates an expected call of GetElasticsearchProjectRolesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetElasticsearchProjectRolesWithResponse(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetElasticsearchProjectRolesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetElasticsearchProjectRolesWithResponse), varargs...)
}

// GetElasticsearchProjectStatusWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetElasticsearchProjectStatusWithResponse(ctx context.Context, id serverless.ProjectID, reqEditors ...serverless.RequestEditorFn) (*serverless.GetElasticsearchProjectStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetElasticsearchProjectStatusWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.GetElasticsearchProjectStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetElasticsearchProjectStatusWithResponse indicates an expected call of GetElasticsearchProjectStatusWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetElasticsearchProjectStatusWithResponse(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetElasticsearchProjectStatusWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetElasticsearchProjectStatusWithResponse), varargs...)
}

// GetElasticsearchProjectWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetElasticsearchProjectWithResponse(ctx context.Context, id serverless.ProjectID, reqEditors ...serverless.RequestEditorFn) (*serverless.GetElasticsearchProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetElasticsearchProjectWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.GetElasticsearchProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetElasticsearchProjectWithResponse indicates an expected call of GetElasticsearchProjectWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetElasticsearchProjectWithResponse(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetElasticsearchProjectWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetElasticsearchProjectWithResponse), varargs...)
}

// GetObservabilityProjectRolesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetObservabilityProjectRolesWithResponse(ctx context.Context, id serverless.ProjectID, reqEditors ...serverless.RequestEditorFn) (*serverless.GetObservabilityProjectRolesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObservabilityProjectRolesWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.GetObservabilityProjectRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObservabilityProjectRolesWithResponse indicates an expected call of GetObservabilityProjectRolesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetObservabilityProjectRolesWithResponse(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObservabilityProjectRolesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetObservabilityProjectRolesWithResponse), varargs...)
}

// GetObservabilityProjectStatusWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetObservabilityProjectStatusWithResponse(ctx context.Context, id serverless.ProjectID, reqEditors ...serverless.RequestEditorFn) (*serverless.GetObservabilityProjectStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObservabilityProjectStatusWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.GetObservabilityProjectStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObservabilityProjectStatusWithResponse indicates an expected call of GetObservabilityProjectStatusWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetObservabilityProjectStatusWithResponse(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObservabilityProjectStatusWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetObservabilityProjectStatusWithResponse), varargs...)
}

// GetObservabilityProjectWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetObservabilityProjectWithResponse(ctx context.Context, id serverless.ProjectID, reqEditors ...serverless.RequestEditorFn) (*serverless.GetObservabilityProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObservabilityProjectWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.GetObservabilityProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObservabilityProjectWithResponse indicates an expected call of GetObservabilityProjectWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetObservabilityProjectWithResponse(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObservabilityProjectWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetObservabilityProjectWithResponse), varargs...)
}

// GetRegionWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetRegionWithResponse(ctx context.Context, id serverless.RegionID, reqEditors ...serverless.RequestEditorFn) (*serverless.GetRegionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegionWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.GetRegionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegionWithResponse indicates an expected call of GetRegionWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetRegionWithResponse(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetRegionWithResponse), varargs...)
}

// GetSecurityProjectRolesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetSecurityProjectRolesWithResponse(ctx context.Context, id serverless.ProjectID, reqEditors ...serverless.RequestEditorFn) (*serverless.GetSecurityProjectRolesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecurityProjectRolesWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.GetSecurityProjectRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityProjectRolesWithResponse indicates an expected call of GetSecurityProjectRolesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetSecurityProjectRolesWithResponse(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityProjectRolesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetSecurityProjectRolesWithResponse), varargs...)
}

// GetSecurityProjectStatusWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetSecurityProjectStatusWithResponse(ctx context.Context, id serverless.ProjectID, reqEditors ...serverless.RequestEditorFn) (*serverless.GetSecurityProjectStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecurityProjectStatusWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.GetSecurityProjectStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityProjectStatusWithResponse indicates an expected call of GetSecurityProjectStatusWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetSecurityProjectStatusWithResponse(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityProjectStatusWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetSecurityProjectStatusWithResponse), varargs...)
}

// GetSecurityProjectWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetSecurityProjectWithResponse(ctx context.Context, id serverless.ProjectID, reqEditors ...serverless.RequestEditorFn) (*serverless.GetSecurityProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecurityProjectWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.GetSecurityProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityProjectWithResponse indicates an expected call of GetSecurityProjectWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetSecurityProjectWithResponse(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityProjectWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetSecurityProjectWithResponse), varargs...)
}

// ListElasticsearchProjectsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListElasticsearchProjectsWithResponse(ctx context.Context, params *serverless.ListElasticsearchProjectsParams, reqEditors ...serverless.RequestEditorFn) (*serverless.ListElasticsearchProjectsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListElasticsearchProjectsWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.ListElasticsearchProjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListElasticsearchProjectsWithResponse indicates an expected call of ListElasticsearchProjectsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListElasticsearchProjectsWithResponse(ctx, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListElasticsearchProjectsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListElasticsearchProjectsWithResponse), varargs...)
}

// ListObservabilityProjectsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListObservabilityProjectsWithResponse(ctx context.Context, params *serverless.ListObservabilityProjectsParams, reqEditors ...serverless.RequestEditorFn) (*serverless.ListObservabilityProjectsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListObservabilityProjectsWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.ListObservabilityProjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObservabilityProjectsWithResponse indicates an expected call of ListObservabilityProjectsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListObservabilityProjectsWithResponse(ctx, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObservabilityProjectsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListObservabilityProjectsWithResponse), varargs...)
}

// ListRegionsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListRegionsWithResponse(ctx context.Context, reqEditors ...serverless.RequestEditorFn) (*serverless.ListRegionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegionsWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.ListRegionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegionsWithResponse indicates an expected call of ListRegionsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListRegionsWithResponse(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegionsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListRegionsWithResponse), varargs...)
}

// ListSecurityProjectsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListSecurityProjectsWithResponse(ctx context.Context, params *serverless.ListSecurityProjectsParams, reqEditors ...serverless.RequestEditorFn) (*serverless.ListSecurityProjectsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityProjectsWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.ListSecurityProjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityProjectsWithResponse indicates an expected call of ListSecurityProjectsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListSecurityProjectsWithResponse(ctx, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityProjectsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListSecurityProjectsWithResponse), varargs...)
}

// PatchElasticsearchProjectWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PatchElasticsearchProjectWithBodyWithResponse(ctx context.Context, id serverless.ProjectID, params *serverless.PatchElasticsearchProjectParams, contentType string, body io.Reader, reqEditors ...serverless.RequestEditorFn) (*serverless.PatchElasticsearchProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchElasticsearchProjectWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.PatchElasticsearchProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchElasticsearchProjectWithBodyWithResponse indicates an expected call of PatchElasticsearchProjectWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PatchElasticsearchProjectWithBodyWithResponse(ctx, id, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchElasticsearchProjectWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PatchElasticsearchProjectWithBodyWithResponse), varargs...)
}

// PatchElasticsearchProjectWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PatchElasticsearchProjectWithResponse(ctx context.Context, id serverless.ProjectID, params *serverless.PatchElasticsearchProjectParams, body serverless.PatchElasticsearchProjectJSONRequestBody, reqEditors ...serverless.RequestEditorFn) (*serverless.PatchElasticsearchProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchElasticsearchProjectWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.PatchElasticsearchProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchElasticsearchProjectWithResponse indicates an expected call of PatchElasticsearchProjectWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PatchElasticsearchProjectWithResponse(ctx, id, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchElasticsearchProjectWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PatchElasticsearchProjectWithResponse), varargs...)
}

// PatchObservabilityProjectWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PatchObservabilityProjectWithBodyWithResponse(ctx context.Context, id serverless.ProjectID, params *serverless.PatchObservabilityProjectParams, contentType string, body io.Reader, reqEditors ...serverless.RequestEditorFn) (*serverless.PatchObservabilityProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchObservabilityProjectWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.PatchObservabilityProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchObservabilityProjectWithBodyWithResponse indicates an expected call of PatchObservabilityProjectWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PatchObservabilityProjectWithBodyWithResponse(ctx, id, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchObservabilityProjectWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PatchObservabilityProjectWithBodyWithResponse), varargs...)
}

// PatchObservabilityProjectWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PatchObservabilityProjectWithResponse(ctx context.Context, id serverless.ProjectID, params *serverless.PatchObservabilityProjectParams, body serverless.PatchObservabilityProjectJSONRequestBody, reqEditors ...serverless.RequestEditorFn) (*serverless.PatchObservabilityProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchObservabilityProjectWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.PatchObservabilityProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchObservabilityProjectWithResponse indicates an expected call of PatchObservabilityProjectWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PatchObservabilityProjectWithResponse(ctx, id, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchObservabilityProjectWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PatchObservabilityProjectWithResponse), varargs...)
}

// PatchSecurityProjectWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PatchSecurityProjectWithBodyWithResponse(ctx context.Context, id serverless.ProjectID, params *serverless.PatchSecurityProjectParams, contentType string, body io.Reader, reqEditors ...serverless.RequestEditorFn) (*serverless.PatchSecurityProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchSecurityProjectWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.PatchSecurityProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchSecurityProjectWithBodyWithResponse indicates an expected call of PatchSecurityProjectWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PatchSecurityProjectWithBodyWithResponse(ctx, id, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSecurityProjectWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PatchSecurityProjectWithBodyWithResponse), varargs...)
}

// PatchSecurityProjectWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PatchSecurityProjectWithResponse(ctx context.Context, id serverless.ProjectID, params *serverless.PatchSecurityProjectParams, body serverless.PatchSecurityProjectJSONRequestBody, reqEditors ...serverless.RequestEditorFn) (*serverless.PatchSecurityProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchSecurityProjectWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.PatchSecurityProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchSecurityProjectWithResponse indicates an expected call of PatchSecurityProjectWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PatchSecurityProjectWithResponse(ctx, id, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSecurityProjectWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PatchSecurityProjectWithResponse), varargs...)
}

// ResetElasticsearchProjectCredentialsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ResetElasticsearchProjectCredentialsWithResponse(ctx context.Context, id serverless.ProjectID, params *serverless.ResetElasticsearchProjectCredentialsParams, reqEditors ...serverless.RequestEditorFn) (*serverless.ResetElasticsearchProjectCredentialsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetElasticsearchProjectCredentialsWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.ResetElasticsearchProjectCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetElasticsearchProjectCredentialsWithResponse indicates an expected call of ResetElasticsearchProjectCredentialsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ResetElasticsearchProjectCredentialsWithResponse(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetElasticsearchProjectCredentialsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ResetElasticsearchProjectCredentialsWithResponse), varargs...)
}

// ResetObservabilityProjectCredentialsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ResetObservabilityProjectCredentialsWithResponse(ctx context.Context, id serverless.ProjectID, params *serverless.ResetObservabilityProjectCredentialsParams, reqEditors ...serverless.RequestEditorFn) (*serverless.ResetObservabilityProjectCredentialsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetObservabilityProjectCredentialsWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.ResetObservabilityProjectCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetObservabilityProjectCredentialsWithResponse indicates an expected call of ResetObservabilityProjectCredentialsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ResetObservabilityProjectCredentialsWithResponse(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetObservabilityProjectCredentialsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ResetObservabilityProjectCredentialsWithResponse), varargs...)
}

// ResetSecurityProjectCredentialsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ResetSecurityProjectCredentialsWithResponse(ctx context.Context, id serverless.ProjectID, params *serverless.ResetSecurityProjectCredentialsParams, reqEditors ...serverless.RequestEditorFn) (*serverless.ResetSecurityProjectCredentialsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetSecurityProjectCredentialsWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.ResetSecurityProjectCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetSecurityProjectCredentialsWithResponse indicates an expected call of ResetSecurityProjectCredentialsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ResetSecurityProjectCredentialsWithResponse(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetSecurityProjectCredentialsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ResetSecurityProjectCredentialsWithResponse), varargs...)
}

// ResumeElasticsearchProjectWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ResumeElasticsearchProjectWithResponse(ctx context.Context, id serverless.ProjectID, params *serverless.ResumeElasticsearchProjectParams, reqEditors ...serverless.RequestEditorFn) (*serverless.ResumeElasticsearchProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResumeElasticsearchProjectWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.ResumeElasticsearchProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeElasticsearchProjectWithResponse indicates an expected call of ResumeElasticsearchProjectWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ResumeElasticsearchProjectWithResponse(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeElasticsearchProjectWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ResumeElasticsearchProjectWithResponse), varargs...)
}

// ResumeObservabilityProjectWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ResumeObservabilityProjectWithResponse(ctx context.Context, id serverless.ProjectID, params *serverless.ResumeObservabilityProjectParams, reqEditors ...serverless.RequestEditorFn) (*serverless.ResumeObservabilityProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResumeObservabilityProjectWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.ResumeObservabilityProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeObservabilityProjectWithResponse indicates an expected call of ResumeObservabilityProjectWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ResumeObservabilityProjectWithResponse(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeObservabilityProjectWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ResumeObservabilityProjectWithResponse), varargs...)
}

// ResumeSecurityProjectWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ResumeSecurityProjectWithResponse(ctx context.Context, id serverless.ProjectID, params *serverless.ResumeSecurityProjectParams, reqEditors ...serverless.RequestEditorFn) (*serverless.ResumeSecurityProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResumeSecurityProjectWithResponse", varargs...)
	ret0, _ := ret[0].(*serverless.ResumeSecurityProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeSecurityProjectWithResponse indicates an expected call of ResumeSecurityProjectWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ResumeSecurityProjectWithResponse(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeSecurityProjectWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ResumeSecurityProjectWithResponse), varargs...)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// CreateElasticsearchProject mocks base method.
func (m *MockClientInterface) CreateElasticsearchProject(ctx context.Context, body serverless.CreateElasticsearchProjectJSONRequestBody, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateElasticsearchProject", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateElasticsearchProject indicates an expected call of CreateElasticsearchProject.
func (mr *MockClientInterfaceMockRecorder) CreateElasticsearchProject(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateElasticsearchProject", reflect.TypeOf((*MockClientInterface)(nil).CreateElasticsearchProject), varargs...)
}

// CreateElasticsearchProjectWithBody mocks base method.
func (m *MockClientInterface) CreateElasticsearchProjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateElasticsearchProjectWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateElasticsearchProjectWithBody indicates an expected call of CreateElasticsearchProjectWithBody.
func (mr *MockClientInterfaceMockRecorder) CreateElasticsearchProjectWithBody(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateElasticsearchProjectWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreateElasticsearchProjectWithBody), varargs...)
}

// CreateObservabilityProject mocks base method.
func (m *MockClientInterface) CreateObservabilityProject(ctx context.Context, body serverless.CreateObservabilityProjectJSONRequestBody, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateObservabilityProject", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObservabilityProject indicates an expected call of CreateObservabilityProject.
func (mr *MockClientInterfaceMockRecorder) CreateObservabilityProject(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObservabilityProject", reflect.TypeOf((*MockClientInterface)(nil).CreateObservabilityProject), varargs...)
}

// CreateObservabilityProjectWithBody mocks base method.
func (m *MockClientInterface) CreateObservabilityProjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateObservabilityProjectWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObservabilityProjectWithBody indicates an expected call of CreateObservabilityProjectWithBody.
func (mr *MockClientInterfaceMockRecorder) CreateObservabilityProjectWithBody(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObservabilityProjectWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreateObservabilityProjectWithBody), varargs...)
}

// CreateSecurityProject mocks base method.
func (m *MockClientInterface) CreateSecurityProject(ctx context.Context, body serverless.CreateSecurityProjectJSONRequestBody, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSecurityProject", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityProject indicates an expected call of CreateSecurityProject.
func (mr *MockClientInterfaceMockRecorder) CreateSecurityProject(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityProject", reflect.TypeOf((*MockClientInterface)(nil).CreateSecurityProject), varargs...)
}

// CreateSecurityProjectWithBody mocks base method.
func (m *MockClientInterface) CreateSecurityProjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSecurityProjectWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityProjectWithBody indicates an expected call of CreateSecurityProjectWithBody.
func (mr *MockClientInterfaceMockRecorder) CreateSecurityProjectWithBody(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityProjectWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreateSecurityProjectWithBody), varargs...)
}

// DeleteElasticsearchProject mocks base method.
func (m *MockClientInterface) DeleteElasticsearchProject(ctx context.Context, id serverless.ProjectID, params *serverless.DeleteElasticsearchProjectParams, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteElasticsearchProject", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteElasticsearchProject indicates an expected call of DeleteElasticsearchProject.
func (mr *MockClientInterfaceMockRecorder) DeleteElasticsearchProject(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteElasticsearchProject", reflect.TypeOf((*MockClientInterface)(nil).DeleteElasticsearchProject), varargs...)
}

// DeleteObservabilityProject mocks base method.
func (m *MockClientInterface) DeleteObservabilityProject(ctx context.Context, id serverless.ProjectID, params *serverless.DeleteObservabilityProjectParams, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteObservabilityProject", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObservabilityProject indicates an expected call of DeleteObservabilityProject.
func (mr *MockClientInterfaceMockRecorder) DeleteObservabilityProject(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObservabilityProject", reflect.TypeOf((*MockClientInterface)(nil).DeleteObservabilityProject), varargs...)
}

// DeleteSecurityProject mocks base method.
func (m *MockClientInterface) DeleteSecurityProject(ctx context.Context, id serverless.ProjectID, params *serverless.DeleteSecurityProjectParams, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSecurityProject", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecurityProject indicates an expected call of DeleteSecurityProject.
func (mr *MockClientInterfaceMockRecorder) DeleteSecurityProject(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityProject", reflect.TypeOf((*MockClientInterface)(nil).DeleteSecurityProject), varargs...)
}

// GetElasticsearchProject mocks base method.
func (m *MockClientInterface) GetElasticsearchProject(ctx context.Context, id serverless.ProjectID, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetElasticsearchProject", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetElasticsearchProject indicates an expected call of GetElasticsearchProject.
func (mr *MockClientInterfaceMockRecorder) GetElasticsearchProject(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetElasticsearchProject", reflect.TypeOf((*MockClientInterface)(nil).GetElasticsearchProject), varargs...)
}

// GetElasticsearchProjectRoles mocks base method.
func (m *MockClientInterface) GetElasticsearchProjectRoles(ctx context.Context, id serverless.ProjectID, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetElasticsearchProjectRoles", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetElasticsearchProjectRoles indicates an expected call of GetElasticsearchProjectRoles.
func (mr *MockClientInterfaceMockRecorder) GetElasticsearchProjectRoles(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetElasticsearchProjectRoles", reflect.TypeOf((*MockClientInterface)(nil).GetElasticsearchProjectRoles), varargs...)
}

// GetElasticsearchProjectStatus mocks base method.
func (m *MockClientInterface) GetElasticsearchProjectStatus(ctx context.Context, id serverless.ProjectID, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetElasticsearchProjectStatus", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetElasticsearchProjectStatus indicates an expected call of GetElasticsearchProjectStatus.
func (mr *MockClientInterfaceMockRecorder) GetElasticsearchProjectStatus(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetElasticsearchProjectStatus", reflect.TypeOf((*MockClientInterface)(nil).GetElasticsearchProjectStatus), varargs...)
}

// GetObservabilityProject mocks base method.
func (m *MockClientInterface) GetObservabilityProject(ctx context.Context, id serverless.ProjectID, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObservabilityProject", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObservabilityProject indicates an expected call of GetObservabilityProject.
func (mr *MockClientInterfaceMockRecorder) GetObservabilityProject(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObservabilityProject", reflect.TypeOf((*MockClientInterface)(nil).GetObservabilityProject), varargs...)
}

// GetObservabilityProjectRoles mocks base method.
func (m *MockClientInterface) GetObservabilityProjectRoles(ctx context.Context, id serverless.ProjectID, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObservabilityProjectRoles", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObservabilityProjectRoles indicates an expected call of GetObservabilityProjectRoles.
func (mr *MockClientInterfaceMockRecorder) GetObservabilityProjectRoles(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObservabilityProjectRoles", reflect.TypeOf((*MockClientInterface)(nil).GetObservabilityProjectRoles), varargs...)
}

// GetObservabilityProjectStatus mocks base method.
func (m *MockClientInterface) GetObservabilityProjectStatus(ctx context.Context, id serverless.ProjectID, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObservabilityProjectStatus", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObservabilityProjectStatus indicates an expected call of GetObservabilityProjectStatus.
func (mr *MockClientInterfaceMockRecorder) GetObservabilityProjectStatus(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObservabilityProjectStatus", reflect.TypeOf((*MockClientInterface)(nil).GetObservabilityProjectStatus), varargs...)
}

// GetRegion mocks base method.
func (m *MockClientInterface) GetRegion(ctx context.Context, id serverless.RegionID, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegion", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegion indicates an expected call of GetRegion.
func (mr *MockClientInterfaceMockRecorder) GetRegion(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion", reflect.TypeOf((*MockClientInterface)(nil).GetRegion), varargs...)
}

// GetSecurityProject mocks base method.
func (m *MockClientInterface) GetSecurityProject(ctx context.Context, id serverless.ProjectID, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecurityProject", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityProject indicates an expected call of GetSecurityProject.
func (mr *MockClientInterfaceMockRecorder) GetSecurityProject(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityProject", reflect.TypeOf((*MockClientInterface)(nil).GetSecurityProject), varargs...)
}

// GetSecurityProjectRoles mocks base method.
func (m *MockClientInterface) GetSecurityProjectRoles(ctx context.Context, id serverless.ProjectID, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecurityProjectRoles", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityProjectRoles indicates an expected call of GetSecurityProjectRoles.
func (mr *MockClientInterfaceMockRecorder) GetSecurityProjectRoles(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityProjectRoles", reflect.TypeOf((*MockClientInterface)(nil).GetSecurityProjectRoles), varargs...)
}

// GetSecurityProjectStatus mocks base method.
func (m *MockClientInterface) GetSecurityProjectStatus(ctx context.Context, id serverless.ProjectID, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecurityProjectStatus", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityProjectStatus indicates an expected call of GetSecurityProjectStatus.
func (mr *MockClientInterfaceMockRecorder) GetSecurityProjectStatus(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityProjectStatus", reflect.TypeOf((*MockClientInterface)(nil).GetSecurityProjectStatus), varargs...)
}

// ListElasticsearchProjects mocks base method.
func (m *MockClientInterface) ListElasticsearchProjects(ctx context.Context, params *serverless.ListElasticsearchProjectsParams, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListElasticsearchProjects", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListElasticsearchProjects indicates an expected call of ListElasticsearchProjects.
func (mr *MockClientInterfaceMockRecorder) ListElasticsearchProjects(ctx, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListElasticsearchProjects", reflect.TypeOf((*MockClientInterface)(nil).ListElasticsearchProjects), varargs...)
}

// ListObservabilityProjects mocks base method.
func (m *MockClientInterface) ListObservabilityProjects(ctx context.Context, params *serverless.ListObservabilityProjectsParams, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListObservabilityProjects", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObservabilityProjects indicates an expected call of ListObservabilityProjects.
func (mr *MockClientInterfaceMockRecorder) ListObservabilityProjects(ctx, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObservabilityProjects", reflect.TypeOf((*MockClientInterface)(nil).ListObservabilityProjects), varargs...)
}

// ListRegions mocks base method.
func (m *MockClientInterface) ListRegions(ctx context.Context, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegions", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegions indicates an expected call of ListRegions.
func (mr *MockClientInterfaceMockRecorder) ListRegions(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegions", reflect.TypeOf((*MockClientInterface)(nil).ListRegions), varargs...)
}

// ListSecurityProjects mocks base method.
func (m *MockClientInterface) ListSecurityProjects(ctx context.Context, params *serverless.ListSecurityProjectsParams, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityProjects", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityProjects indicates an expected call of ListSecurityProjects.
func (mr *MockClientInterfaceMockRecorder) ListSecurityProjects(ctx, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityProjects", reflect.TypeOf((*MockClientInterface)(nil).ListSecurityProjects), varargs...)
}

// PatchElasticsearchProject mocks base method.
func (m *MockClientInterface) PatchElasticsearchProject(ctx context.Context, id serverless.ProjectID, params *serverless.PatchElasticsearchProjectParams, body serverless.PatchElasticsearchProjectJSONRequestBody, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchElasticsearchProject", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchElasticsearchProject indicates an expected call of PatchElasticsearchProject.
func (mr *MockClientInterfaceMockRecorder) PatchElasticsearchProject(ctx, id, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchElasticsearchProject", reflect.TypeOf((*MockClientInterface)(nil).PatchElasticsearchProject), varargs...)
}

// PatchElasticsearchProjectWithBody mocks base method.
func (m *MockClientInterface) PatchElasticsearchProjectWithBody(ctx context.Context, id serverless.ProjectID, params *serverless.PatchElasticsearchProjectParams, contentType string, body io.Reader, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchElasticsearchProjectWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchElasticsearchProjectWithBody indicates an expected call of PatchElasticsearchProjectWithBody.
func (mr *MockClientInterfaceMockRecorder) PatchElasticsearchProjectWithBody(ctx, id, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchElasticsearchProjectWithBody", reflect.TypeOf((*MockClientInterface)(nil).PatchElasticsearchProjectWithBody), varargs...)
}

// PatchObservabilityProject mocks base method.
func (m *MockClientInterface) PatchObservabilityProject(ctx context.Context, id serverless.ProjectID, params *serverless.PatchObservabilityProjectParams, body serverless.PatchObservabilityProjectJSONRequestBody, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchObservabilityProject", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchObservabilityProject indicates an expected call of PatchObservabilityProject.
func (mr *MockClientInterfaceMockRecorder) PatchObservabilityProject(ctx, id, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchObservabilityProject", reflect.TypeOf((*MockClientInterface)(nil).PatchObservabilityProject), varargs...)
}

// PatchObservabilityProjectWithBody mocks base method.
func (m *MockClientInterface) PatchObservabilityProjectWithBody(ctx context.Context, id serverless.ProjectID, params *serverless.PatchObservabilityProjectParams, contentType string, body io.Reader, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchObservabilityProjectWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchObservabilityProjectWithBody indicates an expected call of PatchObservabilityProjectWithBody.
func (mr *MockClientInterfaceMockRecorder) PatchObservabilityProjectWithBody(ctx, id, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchObservabilityProjectWithBody", reflect.TypeOf((*MockClientInterface)(nil).PatchObservabilityProjectWithBody), varargs...)
}

// PatchSecurityProject mocks base method.
func (m *MockClientInterface) PatchSecurityProject(ctx context.Context, id serverless.ProjectID, params *serverless.PatchSecurityProjectParams, body serverless.PatchSecurityProjectJSONRequestBody, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchSecurityProject", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchSecurityProject indicates an expected call of PatchSecurityProject.
func (mr *MockClientInterfaceMockRecorder) PatchSecurityProject(ctx, id, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSecurityProject", reflect.TypeOf((*MockClientInterface)(nil).PatchSecurityProject), varargs...)
}

// PatchSecurityProjectWithBody mocks base method.
func (m *MockClientInterface) PatchSecurityProjectWithBody(ctx context.Context, id serverless.ProjectID, params *serverless.PatchSecurityProjectParams, contentType string, body io.Reader, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchSecurityProjectWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchSecurityProjectWithBody indicates an expected call of PatchSecurityProjectWithBody.
func (mr *MockClientInterfaceMockRecorder) PatchSecurityProjectWithBody(ctx, id, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSecurityProjectWithBody", reflect.TypeOf((*MockClientInterface)(nil).PatchSecurityProjectWithBody), varargs...)
}

// ResetElasticsearchProjectCredentials mocks base method.
func (m *MockClientInterface) ResetElasticsearchProjectCredentials(ctx context.Context, id serverless.ProjectID, params *serverless.ResetElasticsearchProjectCredentialsParams, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetElasticsearchProjectCredentials", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetElasticsearchProjectCredentials indicates an expected call of ResetElasticsearchProjectCredentials.
func (mr *MockClientInterfaceMockRecorder) ResetElasticsearchProjectCredentials(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetElasticsearchProjectCredentials", reflect.TypeOf((*MockClientInterface)(nil).ResetElasticsearchProjectCredentials), varargs...)
}

// ResetObservabilityProjectCredentials mocks base method.
func (m *MockClientInterface) ResetObservabilityProjectCredentials(ctx context.Context, id serverless.ProjectID, params *serverless.ResetObservabilityProjectCredentialsParams, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetObservabilityProjectCredentials", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetObservabilityProjectCredentials indicates an expected call of ResetObservabilityProjectCredentials.
func (mr *MockClientInterfaceMockRecorder) ResetObservabilityProjectCredentials(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetObservabilityProjectCredentials", reflect.TypeOf((*MockClientInterface)(nil).ResetObservabilityProjectCredentials), varargs...)
}

// ResetSecurityProjectCredentials mocks base method.
func (m *MockClientInterface) ResetSecurityProjectCredentials(ctx context.Context, id serverless.ProjectID, params *serverless.ResetSecurityProjectCredentialsParams, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetSecurityProjectCredentials", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetSecurityProjectCredentials indicates an expected call of ResetSecurityProjectCredentials.
func (mr *MockClientInterfaceMockRecorder) ResetSecurityProjectCredentials(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetSecurityProjectCredentials", reflect.TypeOf((*MockClientInterface)(nil).ResetSecurityProjectCredentials), varargs...)
}

// ResumeElasticsearchProject mocks base method.
func (m *MockClientInterface) ResumeElasticsearchProject(ctx context.Context, id serverless.ProjectID, params *serverless.ResumeElasticsearchProjectParams, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResumeElasticsearchProject", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeElasticsearchProject indicates an expected call of ResumeElasticsearchProject.
func (mr *MockClientInterfaceMockRecorder) ResumeElasticsearchProject(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeElasticsearchProject", reflect.TypeOf((*MockClientInterface)(nil).ResumeElasticsearchProject), varargs...)
}

// ResumeObservabilityProject mocks base method.
func (m *MockClientInterface) ResumeObservabilityProject(ctx context.Context, id serverless.ProjectID, params *serverless.ResumeObservabilityProjectParams, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResumeObservabilityProject", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeObservabilityProject indicates an expected call of ResumeObservabilityProject.
func (mr *MockClientInterfaceMockRecorder) ResumeObservabilityProject(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeObservabilityProject", reflect.TypeOf((*MockClientInterface)(nil).ResumeObservabilityProject), varargs...)
}

// ResumeSecurityProject mocks base method.
func (m *MockClientInterface) ResumeSecurityProject(ctx context.Context, id serverless.ProjectID, params *serverless.ResumeSecurityProjectParams, reqEditors ...serverless.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResumeSecurityProject", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeSecurityProject indicates an expected call of ResumeSecurityProject.
func (mr *MockClientInterfaceMockRecorder) ResumeSecurityProject(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeSecurityProject", reflect.TypeOf((*MockClientInterface)(nil).ResumeSecurityProject), varargs...)
}
