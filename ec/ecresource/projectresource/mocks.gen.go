// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: resource.go
//
// Generated by this command:
//
//	mockgen -source=resource.go -destination mocks.gen.go -package projectresource .
//

// Package projectresource is a generated GoMock package.
package projectresource

import (
	context "context"
	reflect "reflect"

	serverless "github.com/elastic/terraform-provider-ec/ec/internal/gen/serverless"
	diag "github.com/hashicorp/terraform-plugin-framework/diag"
	resource "github.com/hashicorp/terraform-plugin-framework/resource"
	gomock "go.uber.org/mock/gomock"
)

// MockmodelGetter is a mock of modelGetter interface.
type MockmodelGetter struct {
	ctrl     *gomock.Controller
	recorder *MockmodelGetterMockRecorder
}

// MockmodelGetterMockRecorder is the mock recorder for MockmodelGetter.
type MockmodelGetterMockRecorder struct {
	mock *MockmodelGetter
}

// NewMockmodelGetter creates a new mock instance.
func NewMockmodelGetter(ctrl *gomock.Controller) *MockmodelGetter {
	mock := &MockmodelGetter{ctrl: ctrl}
	mock.recorder = &MockmodelGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmodelGetter) EXPECT() *MockmodelGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockmodelGetter) Get(ctx context.Context, target any) diag.Diagnostics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, target)
	ret0, _ := ret[0].(diag.Diagnostics)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockmodelGetterMockRecorder) Get(ctx, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockmodelGetter)(nil).Get), ctx, target)
}

// MockmodelHandler is a mock of modelHandler interface.
type MockmodelHandler[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockmodelHandlerMockRecorder[T]
}

// MockmodelHandlerMockRecorder is the mock recorder for MockmodelHandler.
type MockmodelHandlerMockRecorder[T any] struct {
	mock *MockmodelHandler[T]
}

// NewMockmodelHandler creates a new mock instance.
func NewMockmodelHandler[T any](ctrl *gomock.Controller) *MockmodelHandler[T] {
	mock := &MockmodelHandler[T]{ctrl: ctrl}
	mock.recorder = &MockmodelHandlerMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmodelHandler[T]) EXPECT() *MockmodelHandlerMockRecorder[T] {
	return m.recorder
}

// GetID mocks base method.
func (m *MockmodelHandler[T]) GetID(arg0 T) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockmodelHandlerMockRecorder[T]) GetID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockmodelHandler[T])(nil).GetID), arg0)
}

// Modify mocks base method.
func (m *MockmodelHandler[T]) Modify(arg0, arg1, arg2 T) T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Modify", arg0, arg1, arg2)
	ret0, _ := ret[0].(T)
	return ret0
}

// Modify indicates an expected call of Modify.
func (mr *MockmodelHandlerMockRecorder[T]) Modify(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modify", reflect.TypeOf((*MockmodelHandler[T])(nil).Modify), arg0, arg1, arg2)
}

// ReadFrom mocks base method.
func (m *MockmodelHandler[T]) ReadFrom(arg0 context.Context, arg1 modelGetter) (*T, diag.Diagnostics) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFrom", arg0, arg1)
	ret0, _ := ret[0].(*T)
	ret1, _ := ret[1].(diag.Diagnostics)
	return ret0, ret1
}

// ReadFrom indicates an expected call of ReadFrom.
func (mr *MockmodelHandlerMockRecorder[T]) ReadFrom(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFrom", reflect.TypeOf((*MockmodelHandler[T])(nil).ReadFrom), arg0, arg1)
}

// Schema mocks base method.
func (m *MockmodelHandler[T]) Schema(arg0 context.Context, arg1 resource.SchemaRequest, arg2 *resource.SchemaResponse) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Schema", arg0, arg1, arg2)
}

// Schema indicates an expected call of Schema.
func (mr *MockmodelHandlerMockRecorder[T]) Schema(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schema", reflect.TypeOf((*MockmodelHandler[T])(nil).Schema), arg0, arg1, arg2)
}

// Mockapi is a mock of api interface.
type Mockapi[TModel any] struct {
	ctrl     *gomock.Controller
	recorder *MockapiMockRecorder[TModel]
}

// MockapiMockRecorder is the mock recorder for Mockapi.
type MockapiMockRecorder[TModel any] struct {
	mock *Mockapi[TModel]
}

// NewMockapi creates a new mock instance.
func NewMockapi[TModel any](ctrl *gomock.Controller) *Mockapi[TModel] {
	mock := &Mockapi[TModel]{ctrl: ctrl}
	mock.recorder = &MockapiMockRecorder[TModel]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockapi[TModel]) EXPECT() *MockapiMockRecorder[TModel] {
	return m.recorder
}

// Create mocks base method.
func (m *Mockapi[TModel]) Create(arg0 context.Context, arg1 TModel) (TModel, diag.Diagnostics) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(TModel)
	ret1, _ := ret[1].(diag.Diagnostics)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockapiMockRecorder[TModel]) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*Mockapi[TModel])(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *Mockapi[TModel]) Delete(arg0 context.Context, arg1 TModel) diag.Diagnostics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(diag.Diagnostics)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockapiMockRecorder[TModel]) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*Mockapi[TModel])(nil).Delete), arg0, arg1)
}

// EnsureInitialised mocks base method.
func (m *Mockapi[TModel]) EnsureInitialised(arg0 context.Context, arg1 TModel) diag.Diagnostics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureInitialised", arg0, arg1)
	ret0, _ := ret[0].(diag.Diagnostics)
	return ret0
}

// EnsureInitialised indicates an expected call of EnsureInitialised.
func (mr *MockapiMockRecorder[TModel]) EnsureInitialised(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureInitialised", reflect.TypeOf((*Mockapi[TModel])(nil).EnsureInitialised), arg0, arg1)
}

// Patch mocks base method.
func (m *Mockapi[TModel]) Patch(arg0 context.Context, arg1 TModel) diag.Diagnostics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", arg0, arg1)
	ret0, _ := ret[0].(diag.Diagnostics)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockapiMockRecorder[TModel]) Patch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*Mockapi[TModel])(nil).Patch), arg0, arg1)
}

// Read mocks base method.
func (m *Mockapi[TModel]) Read(arg0 context.Context, arg1 string, arg2 TModel) (bool, TModel, diag.Diagnostics) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(TModel)
	ret2, _ := ret[2].(diag.Diagnostics)
	return ret0, ret1, ret2
}

// Read indicates an expected call of Read.
func (mr *MockapiMockRecorder[TModel]) Read(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*Mockapi[TModel])(nil).Read), arg0, arg1, arg2)
}

// Ready mocks base method.
func (m *Mockapi[TModel]) Ready() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Ready indicates an expected call of Ready.
func (mr *MockapiMockRecorder[TModel]) Ready() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*Mockapi[TModel])(nil).Ready))
}

// WithClient mocks base method.
func (m *Mockapi[TModel]) WithClient(arg0 serverless.ClientWithResponsesInterface) api[TModel] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithClient", arg0)
	ret0, _ := ret[0].(api[TModel])
	return ret0
}

// WithClient indicates an expected call of WithClient.
func (mr *MockapiMockRecorder[TModel]) WithClient(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithClient", reflect.TypeOf((*Mockapi[TModel])(nil).WithClient), arg0)
}
